spring:
  datasource:
    xa:
      properties:
        useInformationSchema: true
#    driver-class-name: oracle.jdbc.driver.OracleDriver
#    url: jdbc:oracle:thin:@127.0.0.1:1521:orcl
#    username: DREAM_BASKETBALL
#    password: DREAM_BASKETBALL1
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://127.0.0.1:3306/dream_basketball
    username: root
    password: Aa52485248!@
#    username: dream_user
#    password: dream_user_epoch

  kafka:
#    bootstrap-servers: 127.0.0.1:9092,127.0.0.1:9093,127.0.0.1:9094
    bootstrap-servers: localhost:9092 #这个是kafka的地址,对应你server.properties中配置的
    producer:
      batch-size: 16384 #批量大小
      # #应答级别:多少个分区副本备份完成时向生产者发送ack确认(可选0、1、all/-1)
      # acks=0 把消息发送到kafka就认为发送成功
      # acks=1 把消息发送到kafka leader分区，并且写入磁盘就认为发送成功
      # acks=all 把消息发送到kafka leader分区，并且leader分区的副本follower对消息进行了同步就任务发送成功
      acks: -1
      retries: 10 # 消息发送重试次数
      # 客户端ID
      client-id: kafka-client
      #      transaction-id-prefix:  tx_1 #事务id前缀
      buffer-memory: 33554432
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      properties:
        linger:
          ms: 2000 #提交延迟
      #     partitioner: #指定分区器
      #     class: com.example.kafkademo.config.CustomizePartitioner
    consumer:
      group-id: testGroup #默认的消费组ID
      enable-auto-commit: true #是否自动提交offset
      auto-commit-interval: 1000 #提交offset延时
      # 当kafka中没有初始offset或offset超出范围时将自动重置offset
      # earliest:重置为分区中最小的offset;
      # latest:重置为分区中最新的offset(消费分区中新产生的数据);
      # none:只要有一个分区不存在已提交的offset,就抛出异常;
      auto-offset-reset: latest
      max-poll-records: 500 #单次拉取消息的最大条数
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      properties:
        session:
          timeout:
            ms: 120000 # 消费会话超时时间（超过这个时间 consumer 没有发送心跳，就会触发 rebalance 操作）
        request:
          timeout:
            ms: 18000 # 消费请求的超时时间
    listener:
      # consumer listener topics 不存在时，启动项目就会报错
#      missing-topics-fatal: false
      type: batch #设置批量消费
  jpa:
    hibernate.ddl-auto: none
    show-sql: true
  freemarker:
    cache: false
    charset: UTF-8
    allow-request-override: false
    check-template-location: true
    enabled: true
    #??
    content-type: text/html
    expose-request-attributes: true
    expose-session-attributes: true
    #????
    suffix: .ftl
    template_update_delay: 0
    mvc:
      static-path-pattern: /static/**
      date-format: yyyy-MM-dd HH:mm:ss
  redis:
    host: localhost
    port: 6379
    database: 0 # 操作的是0号数据库
    jedis: #Redis连接池配置
      pool:
        max-active: 8 #最大连接数
        max-wait: 1ms #连接池最大阻塞等待时间
        max-idle: 4 #连接池中的最大空闲连接
        min-idle: 0 #连接池中的最小空闲连接
  elasticsearch:
    uris: http://localhost:9200
    connection-timeout: 3s
    #??
#    template-loader-path: classpath:/templates/
server:
  port: 8088
mybatis-plus:
  #????xml????
  #config-location: classpath:mybatis-config.xml
  #??????? MyBatis Properties ???????????????????????????????????????ò???
  #configuration-properties: classpath:mybatis/config/properties
  #xml???????????????????????? Mapper ??????? XML ???????
  mapper-locations: classpath*:mybatis/*.xml
  #MyBatis ?????????·???????????????????????????????????·?????????
  type-aliases-package: com.dream.basketball.entity
  #?????????????????????????·??????????????????????
  type-aliases-super-type: java.lang.Object
  #????? ???·?????????????????????·????????????????????????????????????????????
  #type-enums-package: com.wongoing.sys.model
  #???????????xml??????????????????
#  check-config-location: true
  #SIMPLE?????????????????????????????????????????????????????REUSE??????????????????????BATCH????????????????????????????????
#  executor-type: REUSE
  configuration:
    #???????????????
    cache-enabled: false
    call-setters-on-nulls: true
    jdbc-type-for-null: VARCHAR
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
#    # ???????????????????camel case????????????????????? A_COLUMN????????????? ?????? Java ?????? aColumn??????????? ?????????
#    map-underscore-to-camel-case: true
#    # ???????????????????????????????????????????????? true
#    cache-enabled: true
#    #??????
#    aggressive-lazy-loading: true
#    #none?????????????? partial?????????? resultMap ?????????? full????????? resultMap ????????????
#    auto-mapping-behavior: partial
#    #none???????????? (????)warning???????????????????????? failing??????????????????????????????
#    auto-mapping-unknown-column-behavior: none
#    #???????????????????????? MyBatis ?????????????????????
#    call-setters-on-nulls: true   #??????resultType="map"????null?
#    #????????????sql????????????????????????????
#    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
#    #?????????????????????
#    multiple-result-sets-enabled: false
  global-config:
    db-config:
      update-strategy: IGNORED
#      #?????????????????true
#      table-underline: false
#      #id?????
#      id-type: ASSIGN_ID # ????ASSIGN_ID
#      #??????????????????????
#      capital-mode: false
#      #?????????(???????????)
#      logic-not-delete-value: 0 # ????????(???? 0)
#      #????????(???????????)
#      logic-delete-value: 1 # ?????????(???? 1)